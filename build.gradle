buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
        classpath 'net.minecraftforge:GradleUtils:1.+'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    //id 'maven'
    id 'maven-publish'
    id 'java'
    id 'eclipse'
    id 'idea'
}
apply plugin: 'net.minecraftforge.gradleutils'

repositories {
    mavenCentral()
    /*
    maven {
        url 'https://libraries.minecraft.net/'
    }
    */
}

group = 'net.minecraftforge'
archivesBaseName = 'installer'
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

version = gradleutils.getTagOffsetBranchVersion(null, 'master', 'HEAD', '1.x')
println('Installer Version: ' + version)

license {
  header project.file('LICENSE-header.txt')
  include 'net/minecraftforge/installer/**/*.java'
  newLine false
}

ext {
    SPEC_VERSION = gradleutils.gitInfo.tag
    MAIN_CLASS = 'net.minecraftforge.installer.SimpleInstaller'
    //TODO: net.minecraftforge.installer.Java6Gate ?
    MANIFEST = manifest{
        attributes('Main-Class': MAIN_CLASS)
        attributes([
            'Specification-Title':      'Installer',
            'Specification-Vendor':     'Forge Development LLC',
            'Specification-Version':    SPEC_VERSION,
            'Implementation-Title':     'SimpleInstaller',
            'Implementation-Version':   project.version,
            'Implementation-Vendor':    'Forge Development LLC'
        ] as LinkedHashMap, 'net/minecraftforge/installer/')
    }
}

dependencies {
    implementation 'net.sf.jopt-simple:jopt-simple:4.5'
    implementation 'net.sourceforge.argo:argo:3.7'
    implementation 'com.google.guava:guava:14.0'
    implementation 'org.ow2.asm:asm:5.2' //TODO Remove?
	testImplementation(platform('org.junit:junit-bom:5.7.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

compileJava {
    excludes = ['**/Java6Gate.java']
    options.encoding = 'UTF-8'
}

/*
task compilej6(type: JavaCompile) {
    source = fileTree(dir: "src/main/java")
    classpath = sourceSets.main.compileClasspath
    destinationDir = sourceSets.main.output.classesDir
    includes = ['net/minecraftforge/installer/Java6Gate.java']
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

tasks.compileJava.dependsOn('compilej6')
*/

jar {
    classifier = 'thin'
    exclude 'argo/**'
    exclude '**/*.tsrg'
    manifest.from(MANIFEST)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from(MANIFEST)
}

shadowJar {
    classifier 'fatjar'
    manifest.from(MANIFEST)
}

/*
task packerJar(type: Jar, dependsOn: jar) {
    doFirst {
        from zipTree(jar.archivePath)
    }
    classifier = 'packer'
    inputs.file jar.archivePath
    from(configurations.compile.collect { zipTree(it).matching { include '** /*.class' } })
    manifest { attributes 'Main-Class': 'net.minecraftforge.installer.LibraryPacker' }
}

task transformerJar(type: Jar, dependsOn: jar) {
    doFirst {
        from zipTree(jar.archivePath)
    }
    classifier = 'transformer'
    inputs.file jar.archivePath
    from(configurations.compile.collect { zipTree(it).matching { include '** /*.class' } })
    manifest { attributes 'Main-Class': 'net.minecraftforge.installer.transform.LibraryTransformer' }
}
*/

task pgShrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
    ext {
        inputJar = shadowJar.archiveFile.get().asFile
        outDir = file("${buildDir}/proguard")
        obfuscatedJar = "${outDir}/${jar.archiveBaseName}.jar"
        config = 'proguard.pro'
    }
    inputs.file inputJar
    inputs.file config
    
    outDir.mkdirs()

    injars inputJar
    outjars obfuscatedJar

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/jdk.unsupported.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    configuration config
}

task shrinkJar(type: Jar, dependsOn: pgShrinkJar) {
    classifier = 'shrunk'
    from zipTree(pgShrinkJar.obfuscatedJar)
    manifest.from(MANIFEST)
}

artifacts {
    //archives shadowJar
    archives sourcesJar
    archives shrinkJar
    //archives packerJar
    //archives transformerJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact shrinkJar
            artifact jar
            pom {
                name = project.archivesBaseName
                packaging = 'jar'
                description = 'Minecraft Forge Installer'
                url = 'https://github.com/MinecraftForge/Installer'

                scm {
                    url = 'https://github.com/MinecraftForge/Installer'
                    connection = 'scm:git:git://github.com/MinecraftForge/Installer.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/Installer.git'
                }

                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/Installer/issues'
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}
